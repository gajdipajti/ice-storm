% Anisotropy scan
% Author:   gajdost
% package: ice-storm
% Version:  0.a.4-dev

% Area selection %
% In this part you can select a crop size
% This is a simple split
areaUP = [200 100 699 350]; % normal, out of focus
areaDW = [200 550 699 350]; % rotated, in focus

% An input file
%myHome     = '/home/freeman/';
myHome     = '/home/gajdost/';
myWorkDir  = 'munka/adoptim/2013_05_30_GFPAnisData/';
myFileData = 'test1_a2_stack.tif';

% The registration
myDirReg  = 'Dropbox/Munka/adoptim/Diplomamunka/2013_05_30_refData/Calibration_Today/';
myFileReg = 'Cal_fluroscein_10mM_10ms_1emg_100f_r1.tif';
iReg = imread([myHome, myDirReg, myFileReg]);
imReg = flipud(iReg);
irUP = imcrop(imReg, areaUP);
irDW = imcrop(imReg, areaDW);
%cpselect(irUP, irDW);
%%
% http://www.mathworks.com/help/images/ref/cp2tform.html
% http://www.mathworks.com/help/images/ref/tformfwd.html

input_points = [49.8749999999999 333.125000000000;548.375000000000 329.375000000000;635.625000000000 332.625000000000;633.125000000000 50.1249999999999;433.625000000000 56.8749999999999;49.6250000000000 49.8749999999999;95.3750000000000 53.8749999999999;79.3750000000000 333.875000000000];
base_points = [50.6249999999999 337.375000000000;548.125000000000 321.625000000000;638.125000000000 322.375000000000;630.125000000000 37.8749999999999;429.625000000000 50.6249999999999;41.8750000000000 52.6249999999999;88.6250000000000 56.1249999999999;81.1250000000000 338.375000000000];
myTFORM = cp2tform(base_points, input_points, 'projective');
irtDW = imtransform(irDW, myTFORM, 'Xdata', [1 size(irDW,2)], 'Ydata', [1 size(irDW,1)] );
%figure(4); imshow(irtDW);
%figure(5); imshow(irUP);

GUP = double(irtDW) ./ double(irUP);

%figure(5); hist(G(:), [0.5:0.01:1.5]);
GDW = ones(351,700,'uint16');
%figure(6); imshow(GDW);
%%
% Read in
myiInfo = imfinfo([myHome, myWorkDir, myFileData], 'tif');  % Extract file headers and info
numberOfFrames = numel(myiInfo);                            % Number of images in the tif
%%
zEnd=499;
iUPSum = zeros(351,700,zEnd,'uint16');
iDWSum = zeros(351,700,zEnd,'uint16');

%for lpFrames = 1:numberOfFrames
for lpFrames = 1:zEnd
    % Work with small areas
    iDat = imread([myHome, myWorkDir, myFileData], 'tif', 'Index', lpFrames, 'Info', myiInfo); % , 'CellArray', '{[200 899], [100 349]}'
    
    iUPDat = imcrop(iDat, areaUP);
    iUPSum(:,:,lpFrames) = iUPDat;
    iDWDat = imcrop(iDat, areaDW);
    iDWSum(:,:,lpFrames) = iDWDat;
end
%%
%imshow(iDat);
%clear myiInfo;
%% Search Code - pre-processer
% A code part where the pixel marker works.
[mUP, mUPXYZZ] = iceAnalysis(iUPSum,2400,2000,zEnd,4,7,GUP);
[mDW, mDWXYZZ] = iceAnalysis(iDWSum,2400,2000,zEnd,4,7,GDW);
% Two cubes are retured, which include the intensity data.
%% Create a maps
mDWSum = zeros(351,700,'double');
mUPSum = zeros(351,700,'double');
for cx = 1:700
    for cy = 1:351
        mDWSum(cy,cx) = cast(sum(mDW(cy,cx,:)), 'double');
        mUPSum(cy,cx) = cast(sum(mUP(cy,cx,:)), 'double');
    end
end
imwrite(mUPSum,'mUPSum.tif','Compression','none','WriteMode','append');
imwrite(mDWSum,'mDWSum.tif','Compression','none','WriteMode','append');
mtUPSum = imtransform(mUPSum, myTFORM, 'Xdata', [1 size(mUPSum,2)], 'Ydata', [1 size(mUPSum,1)] );
imwrite(mtUPSum,'mtUPSum.tif','Compression','none','WriteMode','append')
%imshow(mtUPSum);
%imshow(mDWSum);
%%
hotUP = zeros(700,zEnd,351,'uint32');
hotDW = zeros(700,zEnd,351,'uint32');
for hotx = 1:700
    for hoty = 1:351
            hotUP(hotx,:,hoty) = mUP(hoty,hotx,:);
            hotDW(hotx,:,hoty) = mDW(hoty,hotx,:);
    end
end
%% Match blinks
% Get maximus, as before.
% Set limit here.
maximus = 1;
deltaLOCX = 5;
deltaLOCY = 3;
mTMPSum = mUPSum;
mTMP = mUP;
mTRFSum = mDWSum;
mTRF = mDW;
% Store the end picture here.
iceCube = zeros(351,700,zEnd,'single');

while maximus > 0
    [bValue, idb] = max(mTMPSum(:));
    [by, bx] = ind2sub(size(mTMPSum),idb); %Possible dim change??? %FIXME%

% OFF: https://www.youtube.com/watch?v=CLXt3yh2g0s
%   And now you're gonna FIX ME
%   I know you're gonna FIX ME
%   I guarantee you'll FIX ME'cause you changed the way of data parsin'.

%   Our array feels wrong please revert it back
%   Our transform feels wrong can't hide the cracks
%   I guarantee you'll miss me 'cause you changed the way of data parsin'.

%    iceStackPlot(bx,by,mTMP(by,bx,:),'ice-summed/');
    % As there is no background, this will work just fine and the XYZbZe stuff is left out.
    % This way it is cleaner.
%    [bZb, bZe] = iceZZ(mTMP(by,bx,:),zEnd);
    % This will need a wrapper for multi-blinks
    [ty, tx] = tformfwd(myTFORM, by, bx);
    txb= uint16(tx) - deltaLOCX;
    txe= uint16(tx) + deltaLOCX;
    tyb= uint16(ty) - deltaLOCY;
    tye= uint16(ty) + deltaLOCY;
    
    % Find the matching needle on the carpet.
    % This solution must be upstreamed to solve the workaround in
    % iceAnalysis
    ij = 1;
    PosPair = zeros(1,4,'uint16');
    % Clear preDeltaZ
    preDeltaZ = 0;
    deltaZ = 0;
    for itx = txb:txe
        for ity = tyb:tye
            if mTRFSum(ity, itx) > 0
                % Possible pairs
                %               FOUND Y_X - TRF Y_X
                [bZb, bZe] = iceZZ(mTMP(by,bx,:),zEnd);
                [tZb, tZe] = iceZZ(mTRF(ity,itx,:),zEnd);
                if ((tZb < bZe) && (bZb < tZe))
                    % Valid match, only when there is a "segment > 0"
                    mZb = max(bZb, tZb);
                    mZe = min(bZe, tZe);
                    deltaZ = mZe - mZb;
                    % Classify the pairs with deltaZ.
                    % The longer the segment, the better the match
                    if preDeltaZ < deltaZ
                        % Store the better fit.
                        preDeltaZ = deltaZ;
                        matchY = ity;
                        matchX = itx;
                        matchZb= mZb;
                        matchZe= mZe;
                    end
                end
                PosPair(ij,:) = [ ity itx ty tx ];
                Pairs = [ bZb bZe tZb tZe ];
                ij = ij + 1;
            end
        end
    end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    % Do the Harlem Shake, but on ice.
    % https://www.youtube.com/watch?v=A8MVyY3N0Cc
    if preDeltaZ > 0  
        for iZ = matchZb:matchZe    %VECTORIZE FIXME%
            POL2 = single(mTMP(by, bx, iZ));
            POL1 = single(mTRF(matchY, matchX, iZ));
            r = ((POL1 - POL2) / (POL1 + 2*POL2)); %FIXME%
            iceCube(by,bx,iZ) = r;
        end
    end  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    % There is nothing to be seen here, move along...
    mTMPSum(by,bx)=0; % Remove the found maximum.
    
%   undef PosPair;
    % This will leave nobody behind, as there is no value between 1000 and 1, only zeroes.
    if bValue < 10000
       maximus = 0;
    end
end
%%
% Histogram plot
icer = iceCube(:);
iced = icer(icer ~= 0);
figure(10);
hist(iced, -0.5:0.1:1);

%% File writeout
%for x = 1:700
%     for z = 1:zEnd;
%         A(:,1,1) = iUPSum(:,x,z);
%        
%         fh = figure('Visible','off');
%         hist(A(:), [50:20:3000]);
%         saveas(fh, [ 'ice-plot/', 'h_', 'X', int2str(x), 'Ys', 'Z', int2str(z) ], 'png')
%         close(fh)
%         
%         fh2 = figure('Visible','off');
%         plot(A(:));
%         saveas(fh2, [ 'ice-plot/', 'p_', 'X', int2str(x), 'Ys', 'Z', int2str(z) ], 'png')
%         close(fh2)
%     end
%     C(:,1,:) = iceCube(:,x,:);
%     
%     fh3 = figure('Visible','off');
%     imshow(C(:,:), [1000 7000]);
%     saveas(fh3, [ 'ice-plot/', 'd_', 'X', int2str(x), 'Ys', 'Zs' ], 'png')
%     close(fh3)
% end
%% Create a map
% Move all to the beginning.
% http://stackoverflow.com/questions/5488504/matlab-remove-leading-and-trailing-zeros-from-a-vector
rj = 1;
for rx = 1:700
    for ry = 1:351
        mRFlat(ry,rx) = cast(sum(iceCube(ry,rx,:)), 'single');
        mRtemp(1,1,:) = iceCube(ry,rx,:);
        mRtempvec = mRtemp(:);
        
        rzb = find(mRtempvec, 1, 'first');
        rze = find(mRtempvec, 1, 'last');
        if (rze - rzb) > 0
            vRtemp = mRtempvec( rzb:rze);
            rzt =  reshape(vRtemp,1,1,(rze-rzb+1) );
            for ri = 1:(rze-rzb+1)
                mRTime(ry,rx,ri) = rzt(ri);
                lRTime(ri,rj)=rzt(ri);
            end
            mRavg(ry,rx)=mean(vRtemp);
            lRavg(rj)=mean(vRtemp);
            tRavg(rj,:)=[ rx ry rze-rzb+1 mean(vRtemp) std(vRtemp)];
            rj= rj +1;
        end
    end
end

%%

ravg = mRavg(:);
ravc = ravg(ravg ~= 0);
figure(11);
hist(lRavg(:), -0.5:0.1:1);

%%
A=(mRTime(176,339,1:20));
B=(mRTime(181,340,1:20));
rA=A(:);
rB=B(:);
plot(A(:));
% %% Just a data reader. Nothing fun here.
% A(:,1,:) = iceCube(:,340,:);
% %[aaax, aaay] = tformfwd(myTFORM, 176, 339)
% %A(1,1,:) = iUPSum(aaay,aaax,:);
% fh3 = figure('Visible','on');
% imshow(A(:,:), [-1 1]);
